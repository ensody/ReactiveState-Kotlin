import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    ext.kotlin_version = '2.1.20'
    ext.composeCompilerVersion = '1.6.11'
}

plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.kotlin.android) apply false
    alias(libs.plugins.jetbrains.compose) apply false
    alias(libs.plugins.kotlin.compose) apply false
    alias(libs.plugins.dokka)
    alias(libs.plugins.axionRelease)
    alias(libs.plugins.versions)
    alias(libs.plugins.nexusPublish)
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

def isOnCI = System.getenv('RUNNING_ON_CI') == 'true'

apply from: "$rootDir/gradle/common/dependency-updates.gradle"
apply from: "$rootDir/gradle/common/scm-version.gradle"
setupScmVersion(isOnCI: isOnCI)

apply from: "$rootDir/secrets.gradle"
def publicationUsername = secrets.getProperty("publication.username") ?: System.getenv("PUBLICATION_USERNAME")
def publicationPassword = secrets.getProperty("publication.password") ?: System.getenv("PUBLICATION_PASSWORD")

// Base package setup
group "com.ensody.reactivestate"
subprojects {
    group rootProject.group

    ext {
        isAndroidProject = ["main", "androidMain"].any { project.file("src/$it/AndroidManifest.xml").exists() }
        isMultiplatform = ["androidMain", "jvmMain", "jvmCommonMain", "commonMain"].any { project.file("src/$it").exists() }
        isIosProject = isMultiplatform && DefaultNativePlatform.currentOperatingSystem.macOsX && ["iosMain", "appleMobileMain", "nativeMain", "nonJvmMain", "commonMain"].any { project.file("src/$it").exists() }
        isPlatformProject = project.name.endsWith("-bom")
        isTestProject = project.name.endsWith("-test")
        isComposeProject = project.name.endsWith("-compose")
        kotlinCompilerArgs = [
            "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
            "-opt-in=kotlinx.coroutines.ExperimentalForInheritanceCoroutinesApi",
            "-opt-in=kotlinx.coroutines.FlowPreview",
            "-opt-in=com.ensody.reactivestate.ExperimentalReactiveStateApi",
        ]
    }

    apply from: "$rootDir/dependencies.gradle"
    if (!isPlatformProject) {
        task testAll(group: "verification")

        if (isAndroidProject) {
            apply from: "$rootDir/gradle/common/android-library.gradle"
            testAll.dependsOn "testDebugUnitTest"
        }
        if (isMultiplatform) {
            apply from: "$rootDir/gradle/common/kotlin-library.gradle"
            kotlinLibrary(
                kotlinCompilerArgs: kotlinCompilerArgs,
            )

            kotlin {
                applyDefaultHierarchyTemplate()

                jvm()
                testAll.dependsOn "jvmTest"
                sourceSets {
                    composeMain { dependsOn(commonMain) }
                    composeTest { dependsOn(commonTest) }
                    nonJvmMain { dependsOn(commonMain) }
                    nonJvmTest { dependsOn(commonTest) }
                    nativeMain { dependsOn(nonJvmMain) }
                    nativeTest { dependsOn(nonJvmTest) }
                    iosMain { dependsOn(composeMain) }
                    iosTest { dependsOn(composeTest) }
                    macosMain { dependsOn(composeMain) }
                    macosTest { dependsOn(composeTest) }
                    wasmJsMain { dependsOn(nonJvmMain) }
                    wasmJsTest { dependsOn(nonJvmTest) }
                    jvmCommonMain { dependsOn(composeMain) }
                    jvmCommonTest { dependsOn(composeTest) }
                    jvmMain { dependsOn(jvmCommonMain) }
                    jvmTest { dependsOn(jvmCommonTest) }
                }

                if (isAndroidProject) {
                    androidTarget {
                        publishLibraryVariants("release")
                    }

//                    androidNativeArm64()
//                    androidNativeArm32()
//                    androidNativeX64()
//                    androidNativeX86()

                    sourceSets {
                        androidMain { dependsOn(jvmCommonMain) }
                        androidUnitTest { dependsOn(jvmCommonTest) }
                    }
                }

                js(IR) {
                    browser()
                    nodejs()
                }
//                testAll.dependsOn "jsIrNodeTest"
                sourceSets {
                    jsMain {
                        dependsOn(nonJvmMain)
                        dependsOn(composeMain)
                    }
                    jsTest {
                        dependsOn(nonJvmTest)
                        dependsOn(composeTest)
                    }
                }

                wasmJs {
                    browser()
                    nodejs()
                }

                iosArm64()
                iosX64()
                iosSimulatorArm64()
                testAll.dependsOn "iosSimulatorArm64Test"
                testAll.dependsOn "iosX64Test"

                tvosArm64()
                tvosX64()
                tvosSimulatorArm64()

                watchosArm32()
                watchosArm64()
                watchosX64()
                watchosSimulatorArm64()

                macosArm64()
                testAll.dependsOn "macosArm64Test"
                macosX64()
                testAll.dependsOn "macosX64Test"

                linuxArm64()
//                testAll.dependsOn "linuxArm64Test"
                linuxX64()
                testAll.dependsOn "linuxX64Test"

                mingwX64()
                testAll.dependsOn "mingwX64Test"
            }
        }

        apply from: "$rootDir/gradle/common/ktlint.gradle"

        if (isAndroidProject) {
            androidLibrary()

            android {
                // Resolve build conflicts for test modules
                if (isTestProject) {
                    packagingOptions {
                        pickFirst 'META-INF/AL2.0'
                        pickFirst 'META-INF/LGPL2.1'
                    }
                }
            }
        }

        dependencies {
            base()
        }

        apply from: "$rootDir/gradle/common/dokka.gradle"
        setupDokka()
        rootProject.dependencies {
            dokka(project)
        }

        // TODO: Switch to Kover
//        if (!publishing) {
//            apply from: "$rootDir/gradle/common/coverage.gradle"
//            trackCoverage(isOnCI)
//        }
    }

    apply from: "$rootDir/gradle/common/publish.gradle"
    publish(
        url: "https://s01.oss.sonatype.org/service/local/",
        username: publicationUsername,
        password: publicationPassword,
        repoUrl: "https://github.com/ensody/ReactiveState-Kotlin",
        pomAction: {
            description = "Easy reactive state management for Kotlin Multiplatform. No boilerplate. Compatible with Android."
            url = "https://ensody.github.io/ReactiveState-Kotlin/"
            licenses {
                license(LICENSE.APACHE2)
            }
            developers {
                developer {
                    id = "wkornewald"
                    name = "Waldemar Kornewald"
                    organization = "Ensody GmbH"
                    organizationUrl = "https://www.ensody.com"
                }
            }
        },
        isPlatformProject: isPlatformProject,
        sign: isOnCI,
    )
}

apply from: "$rootDir/gradle/common/dokka.gradle"
setupDokka()
dokka {
    dokkaPublications {
        configureEach {
            includes.from(rootProject.file("docs/README.md"))
        }
        html {
            outputDirectory.set(project.file("build/docs/html"))
        }
    }
}

nexusPublishing {
    repositories {
        mavenCentral {
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = publicationUsername
            password = publicationPassword
        }
    }
}
