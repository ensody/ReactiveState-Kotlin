import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    ext.kotlin_version = '1.7.21'
}

plugins {
    id 'com.android.application' version '7.3.1' apply false
    id 'org.jetbrains.kotlin.android' version "$kotlin_version" apply false
    id "org.jetbrains.dokka" version "1.7.20"
    id 'pl.allegro.tech.build.axion-release' version '1.13.3'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

def isOnCI = System.getenv('RUNNING_ON_CI') == 'true'

apply from: "$rootDir/gradle/common/dependency-updates.gradle"
apply from: "$rootDir/gradle/common/scm-version.gradle"
setupScmVersion(isOnCI: isOnCI)

apply from: "$rootDir/secrets.gradle"
def publicationUsername = secrets.getProperty("publication.username") ?: System.getenv("PUBLICATION_USERNAME")
def publicationPassword = secrets.getProperty("publication.password") ?: System.getenv("PUBLICATION_PASSWORD")

// Base package setup
group "com.ensody.reactivestate"
subprojects {
    group rootProject.group
    version = rootProject.version

    ext {
        isAndroidProject = ["main", "androidMain"].any { project.file("src/$it/AndroidManifest.xml").exists() }
        isMultiplatform = ["androidMain", "jvmMain", "jvmCommonMain", "commonMain"].any { project.file("src/$it").exists() }
        isIosProject = isMultiplatform && DefaultNativePlatform.currentOperatingSystem.macOsX && ["iosMain", "appleMobileMain", "nativeMain", "nonJvmMain", "commonMain"].any { project.file("src/$it").exists() }
        isPlatformProject = project.name.endsWith("-bom")
        isTestProject = project.name.endsWith("-test")
        isComposeProject = project.name.endsWith("-compose")
        kotlinCompilerArgs = [
            "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
            "-opt-in=kotlinx.coroutines.FlowPreview",
            "-opt-in=com.ensody.reactivestate.ExperimentalReactiveStateApi",
        ]
    }

    apply from: "$rootDir/dependencies.gradle"
    if (!isPlatformProject) {
        task testAll(group: "verification")

        if (isAndroidProject) {
            apply from: "$rootDir/gradle/common/android-library.gradle"
            testAll.dependsOn "testDebugUnitTest"
        }
        if (isMultiplatform) {
            apply from: "$rootDir/gradle/common/kotlin-library.gradle"
            kotlinLibrary(
                kotlinCompilerArgs: kotlinCompilerArgs,
            )

            kotlin {
                jvm()
                testAll.dependsOn "jvmTest"
                sourceSets {
                    nonJvmMain { dependsOn(commonMain) }
                    nonJvmTest { dependsOn(commonTest) }
                    nativeMain { dependsOn(nonJvmMain) }
                    nativeTest { dependsOn(nonJvmTest) }
                    desktopMain { dependsOn(nativeMain) }
                    desktopTest { dependsOn(nativeTest) }
                    jvmCommonMain { dependsOn(commonMain) }
                    jvmCommonTest { dependsOn(commonTest) }
                    jvmMain { dependsOn(jvmCommonMain) }
                    jvmTest { dependsOn(jvmCommonTest) }
                }

                if (isAndroidProject) {
                    android {
                        publishLibraryVariants("release")
                    }

//                    androidNativeArm64()
//                    androidNativeArm32()
//                    androidNativeX64()
//                    androidNativeX86()

                    sourceSets {
                        androidMain { dependsOn(jvmCommonMain) }
                        // TODO: Adapt this once we upgrade to Kotlin 1.8.x
                        androidTest { dependsOn(jvmCommonTest) }.kotlin.srcDirs("$projectDir/src/androidUnitTest")
                    }
                }

                js(IR) {
                    browser()
                    nodejs()
                }
//                testAll.dependsOn "jsIrNodeTest"
                sourceSets {
                    jsMain { dependsOn(nonJvmMain) }
                    jsTest { dependsOn(nonJvmTest) }
                }

//                wasm32()

                if (isIosProject) {
                    ios()
                    iosSimulatorArm64()
                    testAll.dependsOn "iosSimulatorArm64Test"
                    testAll.dependsOn "iosX64Test"

//                    tvos()
//                    tvosSimulatorArm64()

//                    watchos()
//                    watchosX86()
//                    watchosSimulatorArm64()

                    sourceSets {
                        appleMobileMain { dependsOn(nativeMain) }
                        appleMobileTest { dependsOn(nativeTest) }

                        iosMain { dependsOn(appleMobileMain) }
                        iosTest { dependsOn(appleMobileTest) }
                        iosArm64Main { dependsOn(iosMain) }
                        iosArm64Test { dependsOn(iosMain) }
                        iosX64Main { dependsOn(iosMain) }
                        iosX64Test { dependsOn(iosTest) }
                        iosSimulatorArm64Main { dependsOn(iosMain) }
                        iosSimulatorArm64Test { dependsOn(iosTest) }

//                        tvosMain { dependsOn(appleMobileMain) }
//                        tvosTest { dependsOn(appleMobileTest) }
//                        tvosSimulatorArm64Main { dependsOn(tvosMain) }
//                        tvosSimulatorArm64Test { dependsOn(tvosTest) }

//                        watchosMain { dependsOn(appleMobileMain) }
//                        watchosTest { dependsOn(appleMobileTest) }
//                        watchosArm64Main { dependsOn(watchosMain) }
//                        watchosArm64Test { dependsOn(watchosTest) }
//                        watchosArm32Main { dependsOn(watchosMain) }
//                        watchosArm32Test { dependsOn(watchosTest) }
//                        watchosX64Main { dependsOn(watchosMain) }
//                        watchosX64Test { dependsOn(watchosTest) }
//                        watchosX86Main { dependsOn(watchosMain) }
//                        watchosX86Test { dependsOn(watchosTest) }
//                        watchosSimulatorArm64Main { dependsOn(watchosMain) }
//                        watchosSimulatorArm64Test { dependsOn(watchosTest) }
                    }
                }

//                macosArm64()
//                testAll.dependsOn "macosArm64Test"
//                macosX64()
//                testAll.dependsOn "macosX64Test"

//                linuxArm64()
//                testAll.dependsOn "linuxArm64Test"
                linuxX64()
                testAll.dependsOn "linuxX64Test"
//                linuxArm32Hfp()
//                linuxMips32()
//                linuxMipsel32()

                mingwX64()
                testAll.dependsOn "mingwX64Test"
//                mingwX86()
//                testAll.dependsOn "mingwX86Test"

                sourceSets {
                    linuxMain { dependsOn(desktopMain) }
                    linuxTest { dependsOn(desktopTest) }
                    linuxX64Main { dependsOn(linuxMain) }
                    linuxX64Test { dependsOn(linuxTest) }

//                    macosMain { dependsOn(desktopMain) }
//                    macosTest { dependsOn(desktopTest) }
//                    macosArm64Main { dependsOn(macosMain) }
//                    macosArm64Test { dependsOn(macosTest) }
//                    macosX64Main { dependsOn(macosMain) }
//                    macosX64Test { dependsOn(macosTest) }

                    mingwMain { dependsOn(desktopMain) }
                    mingwTest { dependsOn(desktopTest) }
                    mingwX64Main { dependsOn(mingwMain) }
                    mingwX64Test { dependsOn(mingwTest) }
                }
            }
        }

        apply from: "$rootDir/gradle/common/ktlint.gradle"

        if (isAndroidProject) {
            androidLibrary(
                minVersion: isComposeProject ? 21 : 19,
                kotlinCompilerArgs: kotlinCompilerArgs,
            )

            android {
                // Resolve build conflicts for test modules
                if (isTestProject) {
                    packagingOptions {
                        pickFirst 'META-INF/AL2.0'
                        pickFirst 'META-INF/LGPL2.1'
                    }
                }
            }
        }

        dependencies {
            base()
        }

        apply from: "$rootDir/gradle/common/dokka.gradle"

        // TODO: Switch to Kover
//        if (!publishing) {
//            apply from: "$rootDir/gradle/common/coverage.gradle"
//            trackCoverage(isOnCI)
//        }
    }

    apply from: "$rootDir/gradle/common/publish.gradle"
    publish(
        url: "https://s01.oss.sonatype.org/service/local/",
        username: publicationUsername,
        password: publicationPassword,
        repoUrl: "https://github.com/ensody/ReactiveState-Kotlin",
        pomAction: {
            description = "Easy reactive state management for Kotlin Multiplatform. No boilerplate. Compatible with Android."
            url = "https://ensody.github.io/ReactiveState-Kotlin/"
            licenses {
                license(LICENSE.APACHE2)
            }
            developers {
                developer {
                    id = "wkornewald"
                    name = "Waldemar Kornewald"
                    organization = "Ensody GmbH"
                    organizationUrl = "https://www.ensody.com"
                }
            }
        },
        isPlatformProject: isPlatformProject,
        sign: isOnCI,
    )
}

tasks.named("dokkaGfmMultiModule").configure {
    outputDirectory.set(project.file("docs/reference"))
}

nexusPublishing {
    repositories {
        mavenCentral {
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = publicationUsername
            password = publicationPassword
        }
    }
}
